#!/usr/bin/env python
#-*-- coding: utf-8 -*-
import argparse

from BioTab.xlsx2tab import xlsx2tab
from BioTab.tab2xlsx import tab2xlsx
from BioTab.tabfilter import tabfilter

SUB_XLSX2TAB = "xslx2tab"
SUB_TAB2XLSX = "tab2xlsx"
SUB_FILTER = "filter"

class biotab:
    def __init__(self):
        pass

    def exe_xlsx2tab(self, options):
        x2t = xlsx2tab()
        x2t.output_tab(options)
    def exe_tab2xlsx(self, options):
        t2x = tab2xlsx()
        t2x.output_xlsx(options)
    def exe_filter(self, options):
        tf = tabfilter()
        tf.output_filter(options)

if __name__ == '__main__':
    ## description - Text to display before the argument help (default: none)
    parser=argparse.ArgumentParser(description='biotab: the Swiss army knife of tabular data in bioinformatics') 
    subparsers = parser.add_subparsers(help='sub-command help', dest = 'command')
    #### create the parser for the subcommand ######
    parser_xlsx2tab = subparsers.add_parser(SUB_XLSX2TAB, help='Convert XLSX file to tab-deletmited file.')
    parser_xlsx2tab.add_argument('-i', '--input', metavar='input', \
                      # metavar - A name for the argument in usage messages.
                      help='Input file', required=True)
    parser_xlsx2tab.add_argument('-p', '--prefix', metavar='prefix', help='Prefix of the tab-delemited')
  
 
    ### ###
    parser_tab2xlsx = subparsers.add_parser(SUB_TAB2XLSX, help='Convert tab-delemited file to XLSX file.')
    parser_tab2xlsx.add_argument('-t', '--tab', metavar='tab', help='Tab-delemited files. [tab1.txt, tab2.txt]', required=True)
    parser_tab2xlsx.add_argument('-s', '--sheet', metavar='sheet', help='Names for the sheets. By default: if this parameter is not given, the file names of tab-delemited files will be used here.')
    parser_tab2xlsx.add_argument('-f', '--freeze_panes', metavar='freeze_panes', help='Freeze_panes attribute that can be set to a Cell object or a string of a cellâ€™s coordinates. Note that all rows above and all columns to the left of this cell will be frozen, but the row and column of the cell itself will not be frozen. [Default: None]', default=None)
    parser_tab2xlsx.add_argument('-o', '--output', metavar='output', help='Name for output file. [Default: output.xlsx]', default = "output.xlsx")

    ### Filter
    parser_filter = subparsers.add_parser(SUB_FILTER, help='Filter a table based on a list of IDs or regions.')
    parser_filter.add_argument('-t', '--tab', help='Tab-delemited files.', required=True)
    parser_filter.add_argument('-f', '--tabfil', help='Table-delemited file including the column(s) for filtering')
    parser_filter.add_argument('--target_column', type=int, help='Columns to filter', default = 1)
    parser_filter.add_argument('--column', type=int, help='Column(s) with the IDs to filter', default = 1)
    parser_filter.add_argument('-o', '--output', help='output file', default = "Output_file.tab")
    options = parser.parse_args()
    dict_cmd = vars(options)
    print("Subcommand is: " + dict_cmd['command'])
    bt = biotab()
    if dict_cmd['command'] == SUB_XLSX2TAB:
        bt.exe_xlsx2tab(options)
    if dict_cmd['command'] == SUB_TAB2XLSX:
        bt.exe_tab2xlsx(options)
    if dict_cmd['command'] == SUB_FILTER:
        bt.exe_filter(options)
    print("...")
    print("Done")
