#!/usr/bin/env python
#-*-- coding: utf-8 -*-
import argparse
import csv
from openpyxl import load_workbook
from openpyxl import Workbook
from slugify import slugify
from os.path import basename


#from BioTab.xlsx2tab import xlsx2tab
#from BioTab.tab2xlsx import tab2xlsx
#from BioTab.tabfilter import tabfilter

SUB_XLSX2TAB = "xslx2tab"
SUB_CSV2TAB = "csv2tab"
SUB_TAB2XLSX = "tab2xlsx"
SUB_FILTER = "filter"

class tabfilter:
    def __init__ (self):
        pass

    def output_filter(self, options):
        dict_fil = {}
        with open(options.tabfil, 'r') as tabfil:
            for line in tabfil:
                line = line.rstrip("\n")
                ele = line.split("\t")
                col_index = options.column - 1
                if not line.startswith("#"):
                    dict_fil[ele[col_index]] = 1
        #print(dict_fil)
        rec_total, rec_output = 0, 0
        with open(options.tab, 'r') as tab, open(options.output, 'w') as output:
            if options.header is True:
                header = next(tab)
                output.write(header)
            for line in tab:
                rec_total = rec_total + 1
                line = line.rstrip("\n")
                ele = line.split("\t")
                col_index = options.target_column -1
                if ele[col_index] in dict_fil:
                    rec_output = rec_output + 1
                    output.write(line + "\n")

        print("There are {total} lines. {output} was ouputted.".format(
                total = rec_total, output = rec_output
              ))


class tab2xlsx:
    def __init__ (self):
        pass

    def output_xlsx(self, options):
        wb = Workbook()
        tab_list = options.tab.split(",")
        sheet_list = tab_list
        if options.sheet:
            sheet_list = options.sheet.split(",")
        if len(tab_list) != len(sheet_list):
            raise Exception("Sheets number is not equal to table number! Please check!")
        for i in range(0, len(sheet_list)):
            ws = wb.create_sheet(sheet_list[i], i)
            ws.freeze_panes = options.freeze_panes
            with open(tab_list[i]) as tab:
                row_index = 1
                for line in tab:
                    line = line.rstrip()
                    ele = line.split("\t")
                    for j in range(0, len(ele)):
                        #print(row_index)
                        ws.cell(row=row_index, column=j+1).value = ele[j]
                    row_index += 1
        wb.save(options.output)

class xlsx2tab:
    def __init__ (self):
        pass

    def output_tab(self, options):
        wb = load_workbook(options.input)
        if not options.prefix:
            options.prefix = basename(options.input)
        #sheetnames = wb.get_sheet_names() ## deprecated
        sheetnames = wb.sheetnames
        for sheetname in sheetnames:
            sn_slug = slugify(sheetname)
            output_file = '{}.{}.{}'.format(options.prefix, sn_slug, "txt")
            with open(output_file, "w") as output_handle:
                sheet = wb[sheetname]
                for row in sheet.iter_rows():
                    ele = []
                    for cell in row:
                        ele.append(str(cell.value))
                    output_handle.write("\t".join(ele) + "\n")

class csv2tab:
    def __init__ (self):
        pass

    def output_tab(self, options):
        # https://stackoverflow.com/a/27553098/3357935
        print("Converting CSV to tab-delimited file...")
        with open(options.csv) as inputFile:
             with open(options.output, 'w', newline='') as outputFile:
                 reader = csv.DictReader(inputFile, delimiter=',')
                 writer = csv.DictWriter(outputFile, reader.fieldnames, delimiter='\t')
                 writer.writeheader()
                 writer.writerows(reader)
        print("Conversion complete.")

class biotab:
    def __init__(self):
        pass

    def exe_xlsx2tab(self, options):
        x2t = xlsx2tab()
        x2t.output_tab(options)
    def exe_tab2xlsx(self, options):
        t2x = tab2xlsx()
        t2x.output_xlsx(options)
    def exe_filter(self, options):
        tf = tabfilter()
        tf.output_filter(options)
    def exe_csv2tab(self, options):
        c2t = csv2tab()
        c2t.output_tab(options)


if __name__ == '__main__':
    ## description - Text to display before the argument help (default: none)
    parser=argparse.ArgumentParser(description='biotab: the Swiss army knife of tabular data in bioinformatics') 
    subparsers = parser.add_subparsers(help='sub-command help', dest = 'command')
    #### create the parser for the subcommand ######
    parser_xlsx2tab = subparsers.add_parser(SUB_XLSX2TAB, help='Convert XLSX file to tab-deletmited file.')
    parser_xlsx2tab.add_argument('-i', '--input', metavar='input', \
                      # metavar - A name for the argument in usage messages.
                      help='Input file', required=True)
    parser_xlsx2tab.add_argument('-p', '--prefix', metavar='prefix', help='Prefix of the tab-delemited')
  
 
    ### ###
    parser_tab2xlsx = subparsers.add_parser(SUB_TAB2XLSX, help='Convert tab-delemited file to XLSX file.')
    parser_tab2xlsx.add_argument('-t', '--tab', metavar='tab', help='Tab-delemited files. [tab1.txt, tab2.txt]', required=True)
    parser_tab2xlsx.add_argument('-s', '--sheet', metavar='sheet', help='Names for the sheets. By default: if this parameter is not given, the file names of tab-delemited files will be used here.')
    parser_tab2xlsx.add_argument('-f', '--freeze_panes', metavar='freeze_panes', help='Freeze_panes attribute that can be set to a Cell object or a string of a cellâ€™s coordinates. Note that all rows above and all columns to the left of this cell will be frozen, but the row and column of the cell itself will not be frozen. [Default: None]', default=None)
    parser_tab2xlsx.add_argument('-o', '--output', metavar='output', help='Name for output file. [Default: output.xlsx]', default = "output.xlsx")

    ### csv2tab
    parser_csv2tab = subparsers.add_parser(SUB_CSV2TAB, help='Convert tab-delemited file to XLSX file.')
    parser_csv2tab.add_argument('-c', '--csv', metavar='csv', help='csv files', required=True)
    parser_csv2tab.add_argument('-o', '--output', metavar='output', help='Name for output file. [Default: output.tab]', default = "output.tab")

    ### Filter
    parser_filter = subparsers.add_parser(SUB_FILTER, help='Filter a table based on a list of IDs or regions.')
    parser_filter.add_argument('-t', '--tab', help='Tab-delemited files.', required=True)
    parser_filter.add_argument('-f', '--tabfil', help='Table-delemited file including the column(s) for filtering')
    parser_filter.add_argument('--target_column', type=int, help='Columns to filter', default = 1)
    parser_filter.add_argument('--column', type=int, help='Column(s) with the IDs to filter', default = 1)
    parser_filter.add_argument('--header', type=bool, help='Whether the input table has header', default = False)
    parser_filter.add_argument('-o', '--output', help='output file', default = "Output_file.tab")
    options = parser.parse_args()
    dict_cmd = vars(options)
    print("Subcommand is: " + dict_cmd['command'])
    bt = biotab()
    if dict_cmd['command'] == SUB_XLSX2TAB:
        bt.exe_xlsx2tab(options)
    if dict_cmd['command'] == SUB_TAB2XLSX:
        bt.exe_tab2xlsx(options)
    if dict_cmd['command'] == SUB_FILTER:
        bt.exe_filter(options)
    if dict_cmd['command'] == SUB_CSV2TAB:
        bt.exe_csv2tab(options)
    print("...")
    print("Done")
